// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package lang_repository

import (
	"context"
)

const createCommonWord = `-- name: CreateCommonWord :one
INSERT INTO common_words(
	word, lang_code	
) VALUES (
	$1, $2
)RETURNING id, word, lang_code
`

type CreateCommonWordParams struct {
	Word     string
	LangCode string
}

func (q *Queries) CreateCommonWord(ctx context.Context, arg CreateCommonWordParams) (CommonWord, error) {
	row := q.db.QueryRow(ctx, createCommonWord, arg.Word, arg.LangCode)
	var i CommonWord
	err := row.Scan(&i.ID, &i.Word, &i.LangCode)
	return i, err
}

const deleteCommonWordById = `-- name: DeleteCommonWordById :one
DELETE FROM common_words 
	WHERE id = $1
RETURNING id, word, lang_code
`

func (q *Queries) DeleteCommonWordById(ctx context.Context, id int64) (CommonWord, error) {
	row := q.db.QueryRow(ctx, deleteCommonWordById, id)
	var i CommonWord
	err := row.Scan(&i.ID, &i.Word, &i.LangCode)
	return i, err
}

const getCommonWordById = `-- name: GetCommonWordById :one
SELECT id, word, lang_code FROM common_words 
	WHERE id = $1
`

func (q *Queries) GetCommonWordById(ctx context.Context, id int64) (CommonWord, error) {
	row := q.db.QueryRow(ctx, getCommonWordById, id)
	var i CommonWord
	err := row.Scan(&i.ID, &i.Word, &i.LangCode)
	return i, err
}

const listCommonWords = `-- name: ListCommonWords :many
SELECT id, word, lang_code FROM common_words
`

func (q *Queries) ListCommonWords(ctx context.Context) ([]CommonWord, error) {
	rows, err := q.db.Query(ctx, listCommonWords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CommonWord
	for rows.Next() {
		var i CommonWord
		if err := rows.Scan(&i.ID, &i.Word, &i.LangCode); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCommonWordById = `-- name: UpdateCommonWordById :one
UPDATE common_words SET word = $2, 
	lang_code =  $3
	WHERE id = $1
 RETURNING id, word, lang_code
`

type UpdateCommonWordByIdParams struct {
	ID       int64
	Word     string
	LangCode string
}

func (q *Queries) UpdateCommonWordById(ctx context.Context, arg UpdateCommonWordByIdParams) (CommonWord, error) {
	row := q.db.QueryRow(ctx, updateCommonWordById, arg.ID, arg.Word, arg.LangCode)
	var i CommonWord
	err := row.Scan(&i.ID, &i.Word, &i.LangCode)
	return i, err
}
