// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: language.sql

package platform_postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLanguage = `-- name: CreateLanguage :one
INSERT INTO language(
	code, name, native_name, script, description, metadata
) VALUES (
	$1, $2, $3, $4, $5, $6
)RETURNING language_id, code, name, native_name, script, description, metadata, created_at, updated_at
`

type CreateLanguageParams struct {
	Code        string
	Name        string
	NativeName  string
	Script      pgtype.Text
	Description pgtype.Text
	Metadata    []byte
}

func (q *Queries) CreateLanguage(ctx context.Context, arg CreateLanguageParams) (Language, error) {
	row := q.db.QueryRow(ctx, createLanguage,
		arg.Code,
		arg.Name,
		arg.NativeName,
		arg.Script,
		arg.Description,
		arg.Metadata,
	)
	var i Language
	err := row.Scan(
		&i.LanguageID,
		&i.Code,
		&i.Name,
		&i.NativeName,
		&i.Script,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLanguageById = `-- name: DeleteLanguageById :one
DELETE FROM language 
	WHERE language_id = $1
RETURNING language_id, code, name, native_name, script, description, metadata, created_at, updated_at
`

func (q *Queries) DeleteLanguageById(ctx context.Context, languageID int32) (Language, error) {
	row := q.db.QueryRow(ctx, deleteLanguageById, languageID)
	var i Language
	err := row.Scan(
		&i.LanguageID,
		&i.Code,
		&i.Name,
		&i.NativeName,
		&i.Script,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLanguageById = `-- name: GetLanguageById :one
SELECT language_id, code, name, native_name, script, description, metadata, created_at, updated_at FROM language 
	WHERE language_id = $1
`

func (q *Queries) GetLanguageById(ctx context.Context, languageID int32) (Language, error) {
	row := q.db.QueryRow(ctx, getLanguageById, languageID)
	var i Language
	err := row.Scan(
		&i.LanguageID,
		&i.Code,
		&i.Name,
		&i.NativeName,
		&i.Script,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listLanguage = `-- name: ListLanguage :many
SELECT language_id, code, name, native_name, script, description, metadata, created_at, updated_at FROM language
`

func (q *Queries) ListLanguage(ctx context.Context) ([]Language, error) {
	rows, err := q.db.Query(ctx, listLanguage)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Language
	for rows.Next() {
		var i Language
		if err := rows.Scan(
			&i.LanguageID,
			&i.Code,
			&i.Name,
			&i.NativeName,
			&i.Script,
			&i.Description,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLanguageById = `-- name: UpdateLanguageById :one
UPDATE language SET 
	code = $2, 
	name = $3,
	native_name = $4, 
	script = $5,
	description = $6,
	metadata = $7
	WHERE language_id = $1
 RETURNING language_id, code, name, native_name, script, description, metadata, created_at, updated_at
`

type UpdateLanguageByIdParams struct {
	LanguageID  int32
	Code        string
	Name        string
	NativeName  string
	Script      pgtype.Text
	Description pgtype.Text
	Metadata    []byte
}

func (q *Queries) UpdateLanguageById(ctx context.Context, arg UpdateLanguageByIdParams) (Language, error) {
	row := q.db.QueryRow(ctx, updateLanguageById,
		arg.LanguageID,
		arg.Code,
		arg.Name,
		arg.NativeName,
		arg.Script,
		arg.Description,
		arg.Metadata,
	)
	var i Language
	err := row.Scan(
		&i.LanguageID,
		&i.Code,
		&i.Name,
		&i.NativeName,
		&i.Script,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
